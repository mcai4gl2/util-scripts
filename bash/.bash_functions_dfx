dfx() {
    local want_json=0
    local threshold_yellow=70
    local threshold_red=90
    local args=()

    # Parse flags
    while [ $# -gt 0 ]; do
        case "$1" in
            --json)
                want_json=1
                ;;
            --yellow=*)
                threshold_yellow="${1#*=}"
                ;;
            --red=*)
                threshold_red="${1#*=}"
                ;;
            *)
                args+=("$1")
                ;;
        esac
        shift
    done

    if [ "$want_json" -eq 1 ]; then
        # JSON output (unchanged logic)
        echo "["
        local first=1
        # -P for POSIX one-line per FS. Mountpoint with spaces is safe with read's last field.
        df -hP "${args[@]}" | tail -n +2 | while read -r fs size used avail usep mount; do
            [ -z "$fs" ] && continue
            local use=${usep%%%}

            esc_fs=$(printf '%s' "$fs" | sed 's/\\/\\\\/g; s/"/\\"/g')
            esc_mount=$(printf '%s' "$mount" | sed 's/\\/\\\\/g; s/"/\\"/g')

            if [ $first -eq 0 ]; then
                echo ","
            fi
            first=0
            cat <<EOF
  {
    "filesystem": "$esc_fs",
    "size": "$size",
    "used": "$used",
    "available": "$avail",
    "use_percent": $use,
    "mounted_on": "$esc_mount"
  }
EOF
        done
        echo "]"
        return 0
    fi

    # ----- Human-readable, perfectly aligned and colorized -----

    # ANSI colors as strings to avoid awk issues
    local reset_color=$(printf '\033[0m')
    local green_color=$(printf '\033[0;32m') 
    local yellow_color=$(printf '\033[0;33m')
    local red_color=$(printf '\033[0;31m')

    # To preserve alignment while adding colors, we'll use a different approach:
    # 1. Use column to align the columns first
    # 2. Then post-process each line to inject color codes without changing spacing
    
    # Build a clean TSV (tab-separated) without color, sort by numeric Use%
    {
        printf "Filesystem\tSize\tUsed\tAvail\tUse%%\tMounted on\n"
        df -hP "${args[@]}" | tail -n +2 | while read -r fs size used avail usep mount; do
            [ -z "$fs" ] && continue
            use=${usep%%%}
            # Tab-separated row: fs  size  used  avail  use(plain number)  mount(with spaces ok)
            printf "%s\t%s\t%s\t%s\t%s\t%s\n" "$fs" "$size" "$used" "$avail" "$use" "$mount"
        done | sort -k5,5nr
    } |
    # Align by tabs
    column -s $'\t' -t > /tmp/dfx_aligned_output

    # Process header separately
    head -n 1 /tmp/dfx_aligned_output
    
    # Process data lines with coloring
    tail -n +2 /tmp/dfx_aligned_output | while read -r line; do
        if [ -n "$line" ]; then
            # Extract usage percentage from the line
            # Since it's aligned, we can use awk to parse fields
            usage=$(echo "$line" | awk '{print $5}')
            
            # Determine color based on threshold
            if [ "$usage" -ge "$threshold_red" ]; then
                color="$red_color"
            elif [ "$usage" -ge "$threshold_yellow" ]; then
                color="$yellow_color"
            else
                color="$green_color"
            fi
            
            # Replace the percentage field with colored version
            # We need to preserve the exact spacing, so let's reconstruct
            echo "$line" | awk -v usage="$usage" -v color="$color" -v reset="$reset_color" '
            {
                # Find the percentage field and replace it, preserving alignment
                # Rather than changing $0, we reconstruct the line with colors
                # but need to preserve exact spacing
                
                # Get the original line
                orig = $0
                
                # The hard part is replacing the field while keeping spacing
                # Let us split by spaces but preserve the original spacing pattern
                # Find where the usage percentage appears and replace it with color codes
                # without changing the field width
                
                # Find the position where the field starts
                field_str = " " usage " "
                pos = index($0, field_str)
                if (pos > 0) {
                    # Replace the number with colored version
                    before = substr($0, 1, pos)
                    after = substr($0, pos + length(field_str) + 1)
                    print before color usage "%" reset after
                } else {
                    # Alternative: replace "usage%" pattern
                    gsub(usage "%", color usage "%" reset, $0)
                    print $0
                }
            }'
        fi
    done
    
    # Clean up temp file
    rm -f /tmp/dfx_aligned_output
}